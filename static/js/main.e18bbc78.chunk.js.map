{"version":3,"sources":["Redux/Actions/ActionType.js","Redux/Reducers/Reducer.js","Redux/Store/store.js","Components/Screen.js","Redux/Actions/ActionCreators.js","Components/Controls.js","Components/DrumPad.js","Components/DrumPadContainer.js","Components/DrumMachine.js","Components/AudioSrc.js","index.js"],"names":["ActionTypes","TOOGLE_POWER","CHG_VOLUME","CHG_BANK","DRUMPAD_PRESS","TOGGLE_OVERLAY","SET_AUDIO","PLAY_PAUSE","RESET_AUDIO","initialState","isPowerOn","volume","currentBank","currentSfx","isOverlayShow","audio","audioName","isAudioPlaying","Reducer","state","action","type","ActionType","payload","store","createStore","applyMiddleware","Thunk","Screen","props","getBankName","bind","code","className","id","this","React","Component","connect","ActionCreator","togglePower","volumeChange","changeBank","newBank","drumPadPress","sfxName","toogleOverlay","setAudio","audioElem","playPause","resetAudio","Controls","powerBtnPress","bankModeChanged","volumeBtnPress","openAudioPanel","maxVolDegree","e","powerBtn","document","getElementById","setTimeout","deg","transform","Math","round","spinner","target","clientHeight","clientWidth","offsetLeft","offsetTop","center","move","clientX","clientY","mousex","mousey","touch","touches","atan","abs","PI","getRotationVolume","addEventListener","removeEventListener","slider","value","htmlFor","style","getRotationStyle","onMouseDown","onTouchMove","tabIndex","onClick","step","onChange","dispatch","DrumPad","onDrumPadClick","generateAudioSrc","KbKey","drumPadPressed","src","preload","soundLib","EmptyBank","Bank1","Bank2","Bank3","mapKeyToIndex","Q","W","E","A","S","D","Z","X","C","DrumPadContainer","bank","key","toUpperCase","forEach","sfx","fetch","then","blob","fr","FileReader","onload","result","forceUpdate","readAsDataURL","undefined","btn","currentTime","play","nextProps","prevState","ActionCreators","DrumMachine","AudioSrc","audiofileChanged","playPauseBtn","resetBtn","volChanged","preventDefault","elem","createElement","onended","fileReader","files","startsWith","pause","name","alert","url","Promise","reject","catch","onSubmit","alt","accept","placeholder","defaultValue","min","max","onInput","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e18bbc78.chunk.js","sourcesContent":["\r\n\r\nconst ActionTypes = {\r\n    TOOGLE_POWER: 'TOOGLE_POWER',\r\n    CHG_VOLUME: 'CHANGE_VOLUME',\r\n    CHG_BANK: 'CHANGE_BANK',\r\n    DRUMPAD_PRESS: 'DRUMPAD_PRESS',\r\n    TOGGLE_OVERLAY: 'TOOGLE_OVERLAY',\r\n    SET_AUDIO: 'SET_AUDIO',\r\n    PLAY_PAUSE: 'PLAY_PAUSE',\r\n    RESET_AUDIO: 'RESET_AUDIO'\r\n}\r\n\r\nexport default ActionTypes;","import ActionType from '../Actions/ActionType'\r\n\r\nconst initialState = {\r\n    isPowerOn: true,    // if false, the audio element of drum pads will not have a src attribute, hence no sound\r\n    volume: 50,             \r\n    currentBank: 0,     // 0 means the first bank, 1 means the first and 2 is the second\r\n    currentSfx: '',     // The name of the last played Sfx\r\n    isOverlayShow: false,      //  is the audio selector window shown? Will set the class of window to hidden or not,\r\n                                // as well as set drum pad to make sound on key press or not\r\n    audio: null,           //  Current loaded audio\r\n    audioName: '',          //  CUrrent loaded audio name\r\n    isAudioPlaying: false     //    Is the audio currently playing?\r\n}\r\n\r\nfunction Reducer(state = initialState, action) {\r\n    \r\n    switch (action.type) {\r\n        case ActionType.TOOGLE_POWER:\r\n            return {...state, isPowerOn: !state.isPowerOn};\r\n        case ActionType.CHG_VOLUME:\r\n            return {...state, volume: action.payload };\r\n        case ActionType.CHG_BANK:\r\n            return {...state, currentBank: action.payload };\r\n        case ActionType.DRUMPAD_PRESS:\r\n            return {...state, currentSfx: action.payload };\r\n\r\n        //=======AUDIO ================\r\n        case ActionType.TOGGLE_OVERLAY:\r\n            return {...state, isOverlayShow: !state.isOverlayShow };\r\n        case ActionType.SET_AUDIO:\r\n            return {...state, audio: action.payload[0] , audioName: action.payload[1] };\r\n        case ActionType.PLAY_PAUSE:\r\n            return {...state, isAudioPlaying: !state.isAudioPlaying };\r\n        case ActionType.RESET_AUDIO:\r\n            return {...state, isAudioPlaying: false };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default Reducer;","import { createStore, applyMiddleware } from 'redux'\r\nimport Thunk from 'redux-thunk';\r\nimport Reducer from '../Reducers/Reducer';\r\n\r\nconst store = createStore( Reducer, applyMiddleware(Thunk) );\r\n\r\nexport default store;","import React from 'react';\r\nimport PropType from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass Screen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.getBankName = this.getBankName.bind(this);\r\n    }\r\n\r\n    //  Since bank state is passed in as Number codes, we need to decode it\r\n    getBankName(code) {\r\n        switch(code) {\r\n            case 0: return 'Acoustic';\r\n            case 1: return 'Jihong';\r\n            case 2: return '8-Bit';\r\n            default: return 'Unknown Bank'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //========== JSX =============\r\n        return (\r\n            <div className='machine-screen' id='machine-screen'>\r\n                <div className={ `screen-bank ${this.props.isPowerOn? '': 'hidden'}` } >\r\n                    <span className='bank-name' id='bank-name'>BANK: </span>\r\n                    <span className='bank-content' id='bank-content'> {this.getBankName(this.props.currentBank) } </span>\r\n                </div>\r\n                <div className={ `screen-volume ${this.props.isPowerOn? '': 'hidden'}` }>\r\n                    <span className='volumne-name' id='volume-name'>VOLUME: </span>\r\n                    <span className='volume-content' id='volume-content'> {`${this.props.volume}%`} </span>\r\n                </div>\r\n                <div className={ `screen-sfx ${this.props.isPowerOn? '': 'hidden'}` }>\r\n                    <span className='sfx-name' id='sfx-name'>SFX: </span>\r\n                    <span className='sfx-content' id='display'> {this.props.currentSfx} </span>\r\n                </div>\r\n            </div>\r\n        );\r\n        //==========================\r\n    }\r\n}\r\n\r\n\r\n//====================================================\r\n//  PropTypes, MapStateToProps, MapDispatchToProps\r\n//====================================================\r\nScreen.propTypes = {\r\n    isPowerOn: PropType.bool.isRequired,\r\n    volume: PropType.number.isRequired,\r\n    currentBank: PropType.number.isRequired,\r\n    currentSfx: PropType.string.isRequired\r\n}\r\n\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        isPowerOn: store.isPowerOn,\r\n        volume: store.volume,\r\n        currentBank: store.currentBank,\r\n        currentSfx: store.currentSfx\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null )(Screen);","import ActionType from './ActionType';\r\n\r\nconst ActionCreator = {\r\n\r\n    //  Called when the power button is clicked\r\n    togglePower: function() {\r\n        return {\r\n            type: ActionType.TOOGLE_POWER\r\n        };\r\n    },\r\n\r\n    //  Called when the user changes the volume of the drum machine\r\n    volumeChange: (volume) => {\r\n        return {\r\n            type: ActionType.CHG_VOLUME,\r\n            payload: volume\r\n        }\r\n    },\r\n\r\n    //  Called when the user changes the bank. The payload consists of an integer indicating the id of bank\r\n    //  0 is first, 1 is second, 2 is third\r\n    changeBank: (newBank) => {\r\n        return {\r\n            type: ActionType.CHG_BANK,\r\n            payload: newBank\r\n        }\r\n    },\r\n\r\n    //  Called when one of the drum pad is pressed. The playing of sound effect is handled in the DrumPadCOntainer.\r\n    //  The purpose of this action is just to change the name of sfx on the screen\r\n    drumPadPress: (sfxName) => {\r\n        return {\r\n            type: ActionType.DRUMPAD_PRESS,\r\n            payload: sfxName\r\n        }\r\n    },\r\n\r\n    //========== AUDIO =============\r\n\r\n    //  Called when the audio button or close button on the audio overlay is clicked. Opens or close\r\n    //  the audio window\r\n    toogleOverlay: () => {\r\n        return {\r\n            type: ActionType.TOGGLE_OVERLAY\r\n        };\r\n    },\r\n\r\n    //  Called when the audio is changed in the audio overlay. Payload consists of the new audio HTML\r\n    //  element with the src attribute set, and the audioName to set on the screen\r\n    setAudio: (audioElem, audioName) => {\r\n        return {\r\n            type: ActionType.SET_AUDIO,\r\n            payload: [audioElem, audioName]\r\n        };\r\n    },\r\n\r\n    //  Called when the play or pause button is pressed. The function is just to set the button icon\r\n    //  to either start or pause\r\n    playPause: () => {\r\n        return {\r\n            type: ActionType.PLAY_PAUSE\r\n        };\r\n    },\r\n\r\n    //  Called when the stop button is pressed. It just make the isPlaying state to false hence the button\r\n    //  will show play icon instead of pause\r\n    resetAudio: () => {\r\n        return {\r\n            type: ActionType.RESET_AUDIO\r\n        };\r\n    }  \r\n}\r\n\r\nexport default ActionCreator;","import React from 'react';\r\nimport PropType from 'prop-types';\r\n\r\nimport ActionCreator from '../Redux/Actions/ActionCreators';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Controls extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.powerBtnPress = this.powerBtnPress.bind(this);\r\n        this.bankModeChanged = this.bankModeChanged.bind(this);\r\n        this.volumeBtnPress = this.volumeBtnPress.bind(this);\r\n        this.openAudioPanel = this.openAudioPanel.bind(this);\r\n\r\n        this.maxVolDegree = 300;\r\n    }\r\n\r\n    //  Triggered when the power button is pressed: Show some animation and dispatch action\r\n    powerBtnPress(e) {\r\n        const powerBtn = document.getElementById('power-btn');\r\n        powerBtn.className = 'power-btn btn-press';\r\n\r\n        this.props.togglePower();\r\n\r\n        setTimeout(() => {\r\n            powerBtn.className = 'power-btn';\r\n        }, 500);\r\n    }\r\n\r\n    //  Opens the audio overlay window\r\n    openAudioPanel() {\r\n        this.props.toogleOverlay();\r\n    }\r\n\r\n    //  Will return a CSS transform property which applies the rotation degree for window notch\r\n    getRotationStyle() {\r\n        const deg = this.props.volume * this.maxVolDegree / 100;\r\n        return {transform: `rotate(${deg}deg)`};\r\n    }\r\n    //  Get the volume set based on the degree of the mouse from the center of the element\r\n    getRotationVolume(deg) {\r\n        return Math.round(100 * deg / this.maxVolDegree );\r\n    }\r\n\r\n    //  When the user mousedown (or touch hold) the volume notch, we need to apply the onmove event\r\n    //  on the notch itself, and will keep track of the degree from the center of notch, which determines\r\n    //  the volume\r\n    volumeBtnPress(e) {\r\n        const spinner = e.target;\r\n        const [ height, width, x, y ] = [spinner.clientHeight, spinner.clientWidth, \r\n                                        spinner.offsetLeft, spinner.offsetTop];\r\n        const center = [x + width / 2, y + height / 2];\r\n\r\n        const move = (e) => {\r\n            let [ mousex, mousey ] = [ e.clientX, e.clientY ];\r\n            if (!mousex) {\r\n                const touch = e.touches[0];\r\n                mousex = touch.clientX;\r\n                mousey = touch.clientY;\r\n            }\r\n            const atan = Math.atan( Math.abs(center[1] - mousey) / Math.abs(center[0] - mousex) )\r\n            const deg = atan * 180 / Math.PI;\r\n            \r\n            //  First Quadrant\r\n            if (mousex >= center[0] && mousey <= center[1] ) {\r\n                this.props.volumeChange( this.getRotationVolume(90 - deg) );\r\n            }\r\n            //  Second Quadrant\r\n            else if (mousex <= center[0] && mousey <= center[1] ) {\r\n                if (deg > this.maxVolDegree - 270) return;\r\n                this.props.volumeChange( this.getRotationVolume(270 + deg) );\r\n            }\r\n            //  Third Quadrant\r\n            else if (mousex < center[0] ) {\r\n                this.props.volumeChange( this.getRotationVolume(270 - deg) );\r\n            }\r\n            //  Fourth Quadrant\r\n            else {\r\n                this.props.volumeChange( this.getRotationVolume(90 + deg) );\r\n            }\r\n        }\r\n\r\n        //  Applies the event listener when the user moves while holding down on the volume notch\r\n        spinner.addEventListener('mousemove', move);\r\n        spinner.addEventListener('touchmove', move);\r\n\r\n        //  Applies event listener when the user releases the volume notch, to remove the move event listener\r\n        spinner.addEventListener('mouseup', () => {\r\n            spinner.removeEventListener('mousemove', move);\r\n        });\r\n        spinner.addEventListener('mouseleave', () => {\r\n            spinner.removeEventListener('mousemove', move);\r\n        });\r\n        spinner.addEventListener('touchend', () => {\r\n            spinner.removeEventListener('mousemove', move);\r\n        });\r\n\r\n    }\r\n\r\n    //  Called when the bank selected is changed\r\n    bankModeChanged(e) {\r\n        const slider = e.target;\r\n        this.props.changeBank( Math.round(slider.value / 50) );\r\n    }\r\n\r\n\r\n    render() {\r\n        //========== JSX =============\r\n        return (\r\n            <div className='control-panel'>\r\n                <div className='control-volume' id='control-volume'>\r\n                    <label htmlFor='volume-spinner'>Volume: </label>\r\n                    <div className='volume-spinner' id='volume-spinner' \r\n                        style={ this.getRotationStyle() } \r\n                        onMouseDown={this.volumeBtnPress }\r\n                        onTouchMove={this.volumeBtnPress } tabIndex='0'/>\r\n                </div>\r\n                <div className='control-audio'>\r\n                    <label htmlFor='audio-panel'>Audio In</label>\r\n                    <div className='audio-panel' id='audio-panel' onClick={ this.openAudioPanel } tabIndex='0'>\r\n                    </div>\r\n                </div>\r\n                <div className='control-power' id='control-power'>\r\n                    <button type='button' className='power-btn' id='power-btn' onClick={this.powerBtnPress } >\r\n                        <i className=\"fas fa-power-off\"></i>\r\n                    </button>\r\n                </div>\r\n                <div className='control-bank' id='control-bank'>\r\n                    <label htmlFor='bank-slider'>\r\n                        <span className='bank-left'>Acoustic</span>\r\n                        <span className='bank-mid'>DJ Jihong</span>\r\n                        <span className='bank-right'>8 Bit</span>\r\n                    </label>\r\n                    <input type='range' step='50' className='bank-slider' id='bank-slider'\r\n                        onChange={this.bankModeChanged} value={this.props.currentBank * 50} />\r\n                </div>\r\n            </div>\r\n        );\r\n        //==========================\r\n    }\r\n}\r\n\r\n\r\n//====================================================\r\n//  PropTypes, MapStateToProps, MapDispatchToProps\r\n//====================================================\r\nControls.propTypes = {\r\n    volume: PropType.number.isRequired,\r\n    currentBank: PropType.number.isRequired,\r\n\r\n    togglePower: PropType.func.isRequired,\r\n    volumeChange: PropType.func.isRequired,\r\n    changeBank: PropType.func.isRequired,\r\n    toogleOverlay: PropType.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        volume: store.volume,\r\n        currentBank: store.currentBank\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        togglePower: () => dispatch(ActionCreator.togglePower() ),\r\n        volumeChange: (volume) => dispatch(ActionCreator.volumeChange(volume) ),\r\n        changeBank: (code) => dispatch(ActionCreator.changeBank(code) ),\r\n        toogleOverlay: () => dispatch(ActionCreator.toogleOverlay() )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);","import React from 'react';\r\nimport PropType from 'prop-types';\r\n\r\n\r\n\r\n\r\nclass DrumPad extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onDrumPadClick = this.onDrumPadClick.bind(this);\r\n        this.generateAudioSrc = this.generateAudioSrc.bind(this);\r\n    }\r\n\r\n\r\n    //  When the drum pad is clicked, just call the callback function. It will be handled in the\r\n    //  DrumPadContainer Component\r\n    onDrumPadClick() {\r\n        const { KbKey, drumPadPressed, audio } = this.props;\r\n        drumPadPressed( KbKey, audio[0] );\r\n    }\r\n\r\n    //  A function to generate the audio HTML element for the drum pad Sfx\r\n    generateAudioSrc(src, KbKey) {\r\n        if (src) {\r\n            return (\r\n                <audio className='clip' src={src} id={KbKey} preload='auto' />\r\n            );\r\n        }\r\n        //  If src is empty, then it will not generate the audio HTML element\r\n        return;\r\n    }\r\n\r\n\r\n    render() {\r\n        const { KbKey, audio } = this.props;\r\n        \r\n        //=================JSX====================\r\n        return (\r\n            <div className='drum-pad' id={ `${ KbKey}-btn` }\r\n                 onClick={this.onDrumPadClick} tabIndex='0' >\r\n                { KbKey }\r\n                { this.generateAudioSrc(audio[1], KbKey) }\r\n            </div>\r\n        )\r\n        //========================================\r\n    }\r\n\r\n}\r\n\r\n//====================================================\r\n//  PropTypes, MapStateToProps, MapDispatchToProps\r\n//====================================================\r\nDrumPad.propTypes = {\r\n    KbKey: PropType.string.isRequired,\r\n    drumPadPressed: PropType.func.isRequired,\r\n    audio: PropType.array.isRequired\r\n}\r\n\r\nexport default DrumPad;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PropType from 'prop-types';\r\n\r\nimport DrumPad from './DrumPad';\r\nimport ActionCreators from '../Redux/Actions/ActionCreators';\r\n\r\n//  The Banks of Drum pad sfx. It will be fetched and converted into Base 64 Data URL upon mounted, so\r\n//  it will not keep fetching after some time passed\r\nconst soundLib = {\r\n    EmptyBank: [['',''],['',''],['',''],['',''],['',''],['',''],['',''],['',''],['',''] ],\r\n    Bank1: [\r\n        ['Open Hi-hat',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_ElecK06-OpHat.wav'\r\n        ],\r\n        ['Cymbal',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_ElecK01-Cymbal.wav'\r\n        ],\r\n        ['Crash',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_Kurz03-Crash03.wav'\r\n        ],\r\n        ['Clap',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_ElecK05-Clap01.wav'\r\n        ],\r\n        ['Snare',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_ElecK05-Snr01.wav'\r\n        ],\r\n        ['Ride',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_Kurz04-Ride01.wav'\r\n        ],\r\n        ['Kick',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_ElecK05-Kick02.wav'\r\n        ],\r\n        ['Rim',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_K2room_Rim-02.wav'\r\n        ],\r\n        ['Closed Hi-hat',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/DrumSoundSelected/CYCdh_ElecK05-ClHat01.wav'\r\n        ]\r\n    ],\r\n    Bank2: [\r\n        ['Robot 1',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/robot_edited.mp3'\r\n        ],\r\n        ['Robot 2',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/robot_edited2.mp3'\r\n        ],\r\n        ['Solo',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/solo_edited.mp3'\r\n        ],\r\n        ['Drop',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/drop_edited.mp3'\r\n        ],\r\n        ['Snare',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/tu_edited.mp3'\r\n        ],\r\n        ['Bubble',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/bubble_edited.mp3'\r\n        ],\r\n        ['Kick',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/kick_edited.mp3'\r\n        ],\r\n        ['Fart',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/fart_edited.mp3'\r\n        ],\r\n        ['Closed hat',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/edited/hat_edited.mp3'\r\n        ]\r\n    ],\r\n    Bank3: [\r\n        ['Tom 1',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/TOM%201.wav'\r\n        ],\r\n        ['Tom 2',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/TOM%202.wav'\r\n        ],\r\n        ['Tom 3',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/TOM%203.wav'\r\n        ],\r\n        ['Snare 1',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/Snare%201.wav'\r\n        ],\r\n        ['Snare 2',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/Snare%202.wav'\r\n        ],\r\n        ['Snare 3',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/Snare%203.wav'\r\n        ],\r\n        ['Kick', \r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/KICK.wav'\r\n        ],\r\n        ['Hi-hat Open',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/Hat%20Open.wav'\r\n        ],\r\n        ['Hi-hat Closed',\r\n        'https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/FREE%208-BIT%20DRUM%20SAMPLES%20-%20LAVANDERIA%20EST%C3%9ADIO/HH%20Closed.wav'\r\n        ]\r\n    ]\r\n}\r\n\r\n\r\n//  Since soundLib is implemented using array, we need a way to map the keys to the index of array\r\nconst mapKeyToIndex = {\r\n    Q: 0,\r\n    W: 1,\r\n    E: 2,\r\n    A: 3,\r\n    S: 4,\r\n    D: 5, \r\n    Z: 6,\r\n    X: 7,\r\n    C: 8\r\n}\r\n\r\n\r\n\r\nclass DrumPadContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.drumPadPressed = this.drumPadPressed.bind(this);\r\n    }\r\n\r\n    //  The current bank selected, that should be play\r\n    state = {\r\n        bank: soundLib.Bank1\r\n    }\r\n\r\n    static getDerivedStateFromProps( nextProps, prevState ) {\r\n        const { isPowerOn, isOverlayShow, currentBank } = nextProps;\r\n        //  If the power is off, or the overlay is shown, then apply empty bank\r\n        //  Else just get the selected bank based on the slider in Control component\r\n        return {\r\n            bank:   isPowerOn && !isOverlayShow?\r\n                    currentBank === 0? soundLib.Bank1 :\r\n                    currentBank === 1? soundLib.Bank2 :\r\n                                      soundLib.Bank3 : soundLib.EmptyBank\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //  When the key is pressed, it will trigger the drum pad pressed callback with the key passed in as param\r\n        document.addEventListener('keydown', e => {\r\n            this.drumPadPressed( e.key.toUpperCase() );\r\n        })\r\n\r\n        //  Upon component mounted, will fetch the URL's Sfx data, and convert it into Base 64 Data URL,\r\n        //  replace it as URL in the bankLib object, so audio HTML element won't need to fetch repeatedly\r\n        for (let bank in soundLib) {\r\n            soundLib[bank].forEach(sfx => {\r\n                if (sfx[1] ) {\r\n                    fetch(sfx[1])\r\n                    .then(e => e.blob() )\r\n                    .then(blob => {\r\n                        const fr = new FileReader();\r\n                        fr.onload = () => {\r\n                            sfx[1] = fr.result;\r\n                            this.forceUpdate();\r\n                        }\r\n                        fr.readAsDataURL(blob);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    //  Called when an individual drum pad is clicked, or a keyboard key is pressed\r\n    drumPadPressed(key) {\r\n        //  Since any key will trigger this function, we need to check if it is a valid key\r\n        if ( mapKeyToIndex[key] === undefined ) return;\r\n\r\n        const { volume, drumPadPress } = this.props;\r\n\r\n        const audio = document.getElementById(key);\r\n\r\n        const btn = document.getElementById(key + '-btn');\r\n\r\n        if (audio) {\r\n            audio.volume = volume / 100;\r\n            audio.currentTime = 0;\r\n            audio.play();\r\n        }\r\n\r\n        //  Dispatch function, which sets the name of pressed Sfx to screen\r\n        drumPadPress( this.state.bank[ mapKeyToIndex[key] ][0] );\r\n\r\n        //  Animation\r\n        btn.className = 'drum-pad btn-press';\r\n        setTimeout(() => {\r\n            btn.className = 'drum-pad';\r\n        }, 100);\r\n    }\r\n\r\n\r\n    render() {\r\n        const bank = this.state.bank;\r\n\r\n        //========== JSX =============\r\n        return (\r\n            <div className='drum-pad-container'>\r\n                <DrumPad KbKey='Q' drumPadPressed={ this.drumPadPressed } audio={bank[0] } />\r\n                <DrumPad KbKey='W' drumPadPressed={ this.drumPadPressed } audio={bank[1] }/>\r\n                <DrumPad KbKey='E' drumPadPressed={ this.drumPadPressed } audio={bank[2] }/>\r\n                <DrumPad KbKey='A' drumPadPressed={ this.drumPadPressed } audio={bank[3] }/>\r\n                <DrumPad KbKey='S' drumPadPressed={ this.drumPadPressed } audio={bank[4] }/>\r\n                <DrumPad KbKey='D' drumPadPressed={ this.drumPadPressed } audio={bank[5] }/>\r\n                <DrumPad KbKey='Z' drumPadPressed={ this.drumPadPressed } audio={bank[6] }/>\r\n                <DrumPad KbKey='X' drumPadPressed={ this.drumPadPressed } audio={bank[7] }/>\r\n                <DrumPad KbKey='C' drumPadPressed={ this.drumPadPressed } audio={bank[8] }/>\r\n            </div>\r\n        );\r\n        //==========================\r\n    }\r\n}\r\n\r\n//====================================================\r\n//  PropTypes, MapStateToProps, MapDispatchToProps\r\n//====================================================\r\n\r\nDrumPadContainer.propTypes = {\r\n    isPowerOn: PropType.bool.isRequired,\r\n    volume: PropType.number.isRequired,\r\n    currentBank: PropType.number.isRequired,\r\n    isOverlayShow: PropType.bool.isRequired,\r\n\r\n    drumPadPress: PropType.func.isRequired\r\n};\r\n\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        isPowerOn: store.isPowerOn,\r\n        volume: store.volume,\r\n        currentBank: store.currentBank,\r\n        isOverlayShow: store.isOverlayShow\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        drumPadPress: (sfxName) => dispatch( ActionCreators.drumPadPress(sfxName) )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DrumPadContainer);","import React from 'react';\r\n\r\nimport Screen from './Screen';\r\nimport Controls from './Controls';\r\nimport DrumPad from './DrumPadContainer';\r\n\r\nclass DrumMachine extends React.Component {\r\n\r\n    render() {\r\n        //========== JSX =============\r\n        return (\r\n            <main className='drum-machine' id='drum-machine'>\r\n                <Screen />\r\n                <Controls />\r\n                <DrumPad />\r\n            </main>\r\n        );\r\n        //============================\r\n    }\r\n}\r\n\r\n\r\nexport default DrumMachine;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ActionCreators from '../Redux/Actions/ActionCreators';\r\n\r\n\r\nclass AudioSrc extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.audiofileChanged = this.audiofileChanged.bind(this);\r\n        this.playPauseBtn = this.playPauseBtn.bind(this);\r\n        this.resetBtn = this.resetBtn.bind(this);\r\n        this.volChanged = this.volChanged.bind(this);\r\n    }\r\n\r\n    //  Called when the user selects a local file or submitted a URL to external audio file\r\n    audiofileChanged(e) {\r\n        e.preventDefault();\r\n        const { audio, volume, setAudio } = this.props;\r\n        const elem = e.target;\r\n\r\n        //  The new audio HTML element, which we will dispatch to store when we set the src attribute\r\n        const audioElem = document.createElement('audio');\r\n        audioElem.volume = document.getElementById('audiosrc-volume-input').value;\r\n        audioElem.onended = () => {     //  Once audio ends, it will reset\r\n            this.resetBtn();\r\n        }\r\n        const fileReader = new FileReader();\r\n\r\n        //  Request from Local file\r\n        if (e.target.id === 'audiosrc-local-input') {\r\n            \r\n            const files = elem.files[0];\r\n            //  Testing if it is a valid sound file\r\n            if ( files && files.type.startsWith('audio') ) {\r\n                //  If there is a audio previously, stop it from playing (if it does)\r\n                if (audio)\r\n                    audio.pause();\r\n\r\n                fileReader.onload = () => {     //  Callback\r\n                    audioElem.src = fileReader.result;\r\n                    setAudio(audioElem, files.name );\r\n                    this.resetBtn();\r\n                }\r\n                fileReader.readAsDataURL(files);\r\n            }\r\n            else {\r\n                alert('You are not providing a valid audio file!')\r\n            }\r\n        }\r\n        //  Request From URL\r\n        else if (e.target.id === 'audiosrc') {\r\n            const url = document.getElementById('audiosrc-online-input').value;\r\n\r\n            fetch(url)\r\n            .then(e => e.blob() )\r\n            .then(blob => {\r\n                //  If the url file fetched back was a valid audio file\r\n                if (blob.type.startsWith('audio') ) {\r\n                    //Stop the audio playing, if it was\r\n                    if (audio)\r\n                        audio.pause();\r\n\r\n                    fileReader.onload = () => {     //  Callback\r\n                        audioElem.src = fileReader.result;\r\n                        setAudio(audioElem, url );\r\n                        this.resetBtn();\r\n                    }\r\n                    fileReader.readAsDataURL(blob);\r\n                }\r\n                else\r\n                    return Promise.reject();\r\n            })\r\n            .catch(e => {\r\n                alert('Unable to load Audio URL!');\r\n            })\r\n        }\r\n    }\r\n\r\n    //  Called when the play or pause button is clicked\r\n    playPauseBtn() {\r\n        const { audio, isAudioPlaying, playPause } = this.props;\r\n        if (!audio) return;     //  There is no audio HTML element, therefore do nothing\r\n\r\n        if (isAudioPlaying) {\r\n            audio.pause();\r\n            playPause();\r\n        }\r\n        else {\r\n            audio.play();\r\n            playPause();\r\n        }\r\n    }\r\n\r\n    //  Called when the stop button is clicked\r\n    resetBtn() {\r\n        const { audio, resetAudio } = this.props;\r\n        //  If there is HTML audio element, stop it and reset time to 0\r\n        if (audio) {\r\n            audio.pause();\r\n            audio.currentTime = 0;\r\n        }\r\n        resetAudio();\r\n    }\r\n\r\n\r\n    //  Called when the volume slider is changed.\r\n    volChanged(e) {\r\n        const { audio } = this.props;\r\n        if (audio) {\r\n            audio.volume = e.target.value;\r\n        }\r\n    }\r\n\r\n\r\n    //  Just apply event listener to the close button so it closes the window on click\r\n    componentDidMount() {\r\n        document.getElementById('audiosrc-close-btn').addEventListener('click', () => {\r\n            this.props.toogleOverlay();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {  isOverlayShow, audioName , isAudioPlaying } = this.props;\r\n\r\n        //===================JSX=====================\r\n        return (\r\n            <div className={ `overlay ${isOverlayShow? '': 'closed-invis'}` } id='overlay' >\r\n                <form className='audiosrc' id='audiosrc' onSubmit={this.audiofileChanged }>\r\n                    <div className='audiosrc-close' id='audiosrc-close'>\r\n                        <i className=\"fas fa-times\" id='audiosrc-close-btn'></i>\r\n                    </div>\r\n                    <div className='audiosrc-local' id='audiosrc-local'>\r\n                        <p>CD Insert Here <i className=\"fas fa-caret-down\"></i></p>\r\n                        <p><small>(Select Audio file from local machine) </small></p>\r\n                        \r\n                        <div className='cd-insert' id='cd-insert' tabIndex='0'>\r\n                            <label htmlFor='audiosrc-local-input'>\r\n                                <img src='https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/DVD_logo.svg/1280px-DVD_logo.svg.png' alt='DVD logo'/>\r\n                            </label>\r\n                        </div>\r\n                        <input type='file' className='audiosrc-local-input hidden' id='audiosrc-local-input' \r\n                            accept=\"audio/*\" onChange={this.audiofileChanged} />\r\n                    </div>\r\n                    <div className='audiosrc-online' id='audiosrc-online'>\r\n                        <label htmlFor='audiosrc-online-input'>Internet</label>\r\n                        <p><small>(Only raw files allowed)</small></p>\r\n                        <input className='audiosrc-online-input' id='audiosrc-online-input' \r\n                            type='url' placeholder='Enter URL here...' defaultValue='https://assets.mixkit.co/music/preview/mixkit-cat-walk-371.mp3' />\r\n                        <input type='submit' className='audiosrc-online-submit' id='audiosrc-online-submit'\r\n                             value='Go >'/>\r\n                    </div>\r\n                    <div className='audiosrc-control' id='audiosrc-control'>\r\n                        <p>Currently Loaded Audio: </p>\r\n                        <p className='audiosrc-selected' id='audiosrc-selected'>\r\n                            { audioName? audioName: 'Null' }\r\n                        </p>\r\n                        <button type='button' className='audiosrc-startpause' id='audiosrc-startpause' onClick={ this.playPauseBtn }>\r\n                            <i className={ `fas ${isAudioPlaying? 'fa-pause': 'fa-play'}` }></i>\r\n                        </button>\r\n                        <button type='button' className='audiosrc-reset' id='audiosrc-reset' onClick={this.resetBtn } >\r\n                            <i className='fas fa-undo'></i>\r\n                        </button>\r\n                    </div>\r\n                    <div className='audiosrc-volume' id='audiosrc-volume'>\r\n                        <label htmlFor='audiosrc-vol-input'>Volume: </label>\r\n                        <input type='range' className='audiosrc-volume-input' id='audiosrc-volume-input'\r\n                            min='0' max='1' step='0.01' onInput={ this.volChanged } />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n        //===================JSX=====================\r\n    }\r\n}\r\n\r\n\r\n//====================================================\r\n//  PropTypes, MapStateToProps, MapDispatchToProps\r\n//====================================================\r\n\r\nAudioSrc.propTypes = {\r\n    volume: PropTypes.number.isRequired,\r\n    isOverlayShow: PropTypes.bool.isRequired,\r\n    audio: PropTypes.object,\r\n    audioName: PropTypes.string.isRequired,\r\n    isAudioPlaying: PropTypes.bool.isRequired,\r\n\r\n    toogleOverlay: PropTypes.func.isRequired,\r\n    setAudio: PropTypes.func.isRequired,\r\n    playPause: PropTypes.func.isRequired,\r\n    resetAudio: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        volume: store.volume,\r\n        isOverlayShow: store.isOverlayShow,\r\n        audio: store.audio,\r\n        audioName: store.audioName,\r\n        isAudioPlaying: store.isAudioPlaying\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        toogleOverlay: () => dispatch( ActionCreators.toogleOverlay() ),\r\n    \r\n        setAudio: (audioElem, audioName) => dispatch( ActionCreators.setAudio(audioElem, audioName) ),\r\n    \r\n        playPause: () => dispatch( ActionCreators.playPause() ),\r\n    \r\n        resetAudio: () => dispatch( ActionCreators.resetAudio() )\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AudioSrc);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './Redux/Store/store';\n\nimport DrumMachine from './Components/DrumMachine';\nimport AudioSrc from './Components/AudioSrc';\n\nimport './StyleSheets/style.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <DrumMachine />\n      <AudioSrc />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}